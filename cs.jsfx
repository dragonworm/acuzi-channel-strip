desc:Acuzi Channel Strip
//author: Acuzi

// ---------------------- SLIDERS ----------------------
slider1:0<0,400,5>HPF (Hz)
slider2:0<0,10000,1>EQ Freq 1 (Hz)
slider3:1<.5,10,0.1>EQ Q 1
slider4:0<-12,6,0.5>EQ Gain 1 (dB)
slider5:0<0,10000,1>EQ Freq 2 (Hz)
slider6:1<.5,10,0.1>EQ Q 2
slider7:0<-12,6,0.5>EQ Gain 2 (dB)
slider8:0<0,10000,1>EQ Freq 3 (Hz)
slider9:1<.5,10,0.1>EQ Q 3
slider10:0<-12,6,0.5>EQ Gain 3 (dB)
slider11:0<0,10000,1>EQ Freq 4 (Hz)
slider12:1<.5,10,0.1>EQ Q 4
slider13:0<-12,6,0.5>EQ Gain 4 (dB)
slider14:22000<400,22000,5>LPF (Hz)
slider15:0<-12,12,0.5>EQ Output Gain (dB)

slider16:-.1<-30,-.1,.1>Comp Threshold (dB)
slider17:1<1,20,.1>Comp Ratio
slider18:20<0,500,1>Comp Attack (ms)
slider19:200<0,1000,1>Comp Release (ms)
slider20:1<0,1,1{No,Yes}>Comp Auto Make-Up
slider21:0<-12,12,.1>Comp Output (dB)

slider22:1<0,1,1{off,on}>EQ Bypass
slider23:1<0,1,1{off,on}>Comp Bypass

slider24:0<0,100,1>Saturation Amount (%)
slider25:1<0,1,1{off,on}>Saturation Bypass

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

// ---------------------- INIT ----------------------
@init
// EQ init
cDcAdd = 10^-30;
cDenorm = 10^-30;

// Comp init
ext_tail_size=-1;
ext_gr_meter = 0;
gain = seekgain = 1;
c = 8.65617025;
dc = 10^-30;

gr_meter=1;
gr_meter_decay = exp(1/(1*srate));

t = 0;
b = -exp(-62.83185307 / srate );
a = 1.0 + b;

// ---------------------- SLIDER ----------------------
@slider
// ---------------- EQ Filter math ----------------
gainEQ = 10^(slider15/20);

// (HPF)
a0 = 1;
s0 = 1;
q0 = 1 / (sqrt((a0 + 1/a0)*(1/s0 - 1) + 2));
w00 = 2 * $pi * slider1/srate;
cosw00 = cos(w00);
sinw00 = sin(w00);
alpha0 = sinw00 / (2 * q0);

b00 = (1 + cosw00)/2;
b10 = -(1 + cosw00);
b20 = (1 + cosw00)/2;
a00 = 1 + alpha0;
a10 = -2 * cosw00;
a20 = 1 - alpha0;
b00 /= a00; b10 /= a00; b20 /= a00;
a10 /= a00; a20 /= a00;

// Band 1
a1 = (10^(slider4/40));
q1 = slider3;
w01 = 2 * $pi * slider2/srate;
cosw01 = cos(w01);
sinw01 = sin(w01);
alpha1 = sinw01 / (2 * q1);

b01 = 1 + alpha1 * a1;
b11 = -2 * cosw01;
b21 = 1 - alpha1 * a1;
a01 = 1 + alpha1 / a1;
a11 = -2 * cosw01;
a21 = 1 - alpha1 / a1;
b01 /= a01; b11 /= a01; b21 /= a01;
a11 /= a01; a21 /= a01;

// Band 2
a3 = (10^(slider7/40));
q3 = slider6;
w03 = 2 * $pi * slider5/srate;
cosw03 = cos(w03);
sinw03 = sin(w03);
alpha3 = sinw03 / (2 * q3);

b03 = 1 + alpha3 * a3;
b13 = -2 * cosw03;
b23 = 1 - alpha3 * a3;
a03 = 1 + alpha3 / a3;
a13 = -2 * cosw03;
a23 = 1 - alpha3 / a3;
b03 /= a03; b13 /= a03; b23 /= a03;
a13 /= a03; a23 /= a03;

// Band 3
a5 = (10^(slider10/40));
q5 = slider9;
w05 = 2 * $pi * slider8/srate;
cosw05 = cos(w05);
sinw05 = sin(w05);
alpha5 = sinw05 / (2 * q5);

b05 = 1 + alpha5 * a5;
b15 = -2 * cosw05;
b25 = 1 - alpha5 * a5;
a05 = 1 + alpha5 / a5;
a15 = -2 * cosw05;
a25 = 1 - alpha5 / a5;
b05 /= a05; b15 /= a05; b25 /= a05;
a15 /= a05; a25 /= a05;

// Band 4
a7 = (10^(slider13/40));
q7 = slider12;
w07 = 2 * $pi * slider11/srate;
cosw07 = cos(w07);
sinw07 = sin(w07);
alpha7 = sinw07 / (2 * q7);

b07 = 1 + alpha7 * a7;
b17 = -2 * cosw07;
b27 = 1 - alpha7 * a7;
a07 = 1 + alpha7 / a7;
a17 = -2 * cosw07;
a27 = 1 - alpha7 / a7;
b07 /= a07; b17 /= a07; b27 /= a07;
a17 /= a07; a27 /= a07;

// LPF
a9 = 1;
s9 = 2;
q9 = 1 / (sqrt((a9 + 1/a9)*(1/s9 - 1) + 2));
w09 = 2 * $pi * slider14/srate;
cosw09 = cos(w09);
sinw09 = sin(w09);
alpha9 = sinw09 / (2 * q9);

b09 = (1 - cosw09)/2;
b19 = (1 - cosw09);
b29 = (1 - cosw09)/2;
a09 = 1 + alpha9;
a19 = -2 * cosw09;
a29 = 1 - alpha9;
b09 /= a09; b19 /= a09; b29 /= a09;
a19 /= a09; a29 /= a09;

// ---------------- Compressor math ----------------
threshDB = slider16;
thresh = exp(threshDB/c);
ratio = 1/slider17;

attack = exp( threshDB / (slider18*srate/1000) / c);
release = exp( threshDB / (slider19*srate/1000) / c );

volume = exp(slider21/c) / (slider20 ? exp(( threshDB -threshDB*ratio )/c)  : 1 );
seekgain = 1;

// ---------------- Saturation math ----------------
sat_amount = slider24;
satFoo = sat_amount/200*$pi;
satBar = sin(sat_amount/200*$pi);

// ---------------------- AUDIO PROCESS ----------------------
@sample
// ===== EQ Stage =====
eq_bypass = slider22;
eq_bypass == 0 ? (
 // HPF
  slider1 != 0 ? (
    ospl0 = spl0;
    spl0 = b00 * spl0 + b10 * xl10 + b20 * xl20 - a10 * yl10 - a20 * yl20;
    xl20 = xl10; xl10 = ospl0; yl20 = yl10; yl10 = abs(spl0) < cDenorm ? 0 : spl0;

    ospl1 = spl1;
    spl1 = b00 * spl1 + b10 * xr10 + b20 * xr20 - a10 * yr10 - a20 * yr20;
    xr20 = xr10; xr10 = ospl1; yr20 = yr10; yr10 = abs(spl1) < cDenorm ? 0 : spl1;
  );

  spl0 += cDcAdd; spl1 += cDcAdd;

  // Band 1
  slider4 != 0 && slider2 != 0 ? (
    ospl0 = spl0;
    spl0 = b01 * spl0 + b11 * xl11 + b21 * xl21 - a11 * yl11 - a21 * yl21;
    xl21 = xl11; xl11 = ospl0; yl21 = yl11; yl11 = spl0;

    ospl1 = spl1;
    spl1 = b01 * spl1 + b11 * xr11 + b21 * xr21 - a11 * yr11 - a21 * yr21;
    xr21 = xr11; xr11 = ospl1; yr21 = yr11; yr11 = spl1;
  );

  // Band 2
  slider7 && slider5 != 0 ? (
    ospl0 = spl0;
    spl0 = b03 * spl0 + b13 * xl13 + b23 * xl23 - a13 * yl13 - a23 * yl23;
    xl23 = xl13; xl13 = ospl0; yl23 = yl13; yl13 = spl0;

    ospl1 = spl1;
    spl1 = b03 * spl1 + b13 * xr13 + b23 * xr23 - a13 * yr13 - a23 * yr23;
    xr23 = xr13; xr13 = ospl1; yr23 = yr13; yr13 = spl1;
  );

  // Band 3
  slider10 && slider8 != 0 ? (
    ospl0 = spl0;
    spl0 = b05 * spl0 + b15 * xl15 + b25 * xl25 - a15 * yl15 - a25 * yl25;
    xl25 = xl15; xl15 = ospl0; yl25 = yl15; yl15 = spl0;

    ospl1 = spl1;
    spl1 = b05 * spl1 + b15 * xr15 + b25 * xr25 - a15 * yr15 - a25 * yr25;
    xr25 = xr15; xr15 = ospl1; yr25 = yr15; yr15 = spl1;
  );

  // Band 4
  slider13 && slider11 != 0 ? (
    ospl0 = spl0;
    spl0 = b07 * spl0 + b17 * xl17 + b27 * xl27 - a17 * yl17 - a27 * yl27;
    xl27 = xl17; xl17 = ospl0; yl27 = yl17; yl17 = spl0;

    ospl1 = spl1;
    spl1 = b07 * spl1 + b17 * xr17 + b27 * xr27 - a17 * yr17 - a27 * yr27;
    xr27 = xr17; xr17 = ospl1; yr27 = yr17; yr17 = spl1;
  );

  // LPF
  slider14 != 22000 ? (
    ospl0 = spl0;
    spl0 = b09 * spl0 + b19 * xl19 + b29 * xl29 - a19 * yl19 - a29 * yl29;
    xl29 = xl19; xl19 = ospl0; yl29 = yl19; yl19 = spl0;

    ospl1 = spl1;
    spl1 = b09 * spl1 + b19 * xr19 + b29 * xr29 - a19 * yr19 - a29 * yr29;
    xr29 = xr19; xr19 = ospl1; yr29 = yr19; yr19 = spl1;
  );
  spl0 *= gainEQ;
  spl1 *= gainEQ;
);

// ===== Compressor Stage =====
comp_bypass = slider23;
comp_bypass == 0 ? (
  rms = max(abs(spl0), abs(spl1));
  rms = max(sqrt((t = a*rms-b*t)), rms);
  seekGain = ((rms > thresh) ? exp((threshDB + (log(rms)*c-threshDB)*ratio) /c) / rms : 1);
  gain = ((gain > seekGain) ? max( gain*attack , seekGain ) : min( gain/release , seekGain ));
  spl0 *= gain * volume;
  spl1 *= gain * volume;

  gain < gr_meter ? gr_meter=gain : ( gr_meter*=gr_meter_decay; gr_meter>1?gr_meter=1; );
);

// ===== Saturation Stage =====
sat_bypass = slider25;
sat_bypass == 0 && sat_amount > 0 ? (
  spl0 = min(max( sin(max(min(spl0,1),-1)*satFoo)/satBar ,-1) ,1);
  spl1 = min(max( sin(max(min(spl1,1),-1)*satFoo)/satBar ,-1) ,1);
);

// ---------------------- BLOCK ----------------------
@block
ext_gr_meter = gr_meter > 0 ? log(gr_meter)*(20/log(10)) : -150;

// ---------------------- GFX (Compressor Meter) ----------------------
@gfx 0 32
gr_meter *= exp(1/30); gr_meter>1?gr_meter=1; 
gfx_r=1; gfx_g=gfx_b=0; gfx_a=0.8;

meter_bot=20;
meter_h=min(gfx_h,32);
xscale=gfx_w*20/meter_bot;

gfx_y=0;
gfx_x=gfx_w + log10(gr_meter)*xscale;
gfx_rectto(gfx_w,meter_h);

gfx_r=gfx_g=gfx_b=1.0; gfx_a=0.6;

s2=sqrt(2)/2;
g = s2;
while(
  gfx_x=gfx_w + log10(g)*xscale;
  gfx_x >= 0 ? 
  (
    gfx_y=0;
    gfx_lineto(gfx_x,meter_h,0);
    gfx_y=meter_h-gfx_texth;
    gfx_x+=2;
    gfx_drawnumber(log10(g)*20,0);
    gfx_drawchar($'d');
    gfx_drawchar($'B');
  );
  g*=s2;
  gfx_x >=0;
);
gfx_a=1;

gfx_x=0; gfx_y=meter_h/2 - gfx_texth/2;
gfx_drawnumber(log10(gr_meter)*20,1);
gfx_drawchar($'d');
gfx_drawchar($'B');
